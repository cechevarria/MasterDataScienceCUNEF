---
title: "Primas de seguro"
author: "Carlota Echevarria"
date: "13/11/2019"
output:
  word_document: default
  html_document: default
---


Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.

```{r, echo=FALSE, warning=FALSE}
library(readr)
require(forecast)
require(xts)
require(ggplot2)
library(ggfortify)
library(dplyr)

```
#Lectura de datos
```{r}
Primas_mapfre <- read.csv("data/Primas_mapfre.csv", header = TRUE,
    sep = ";", dec = "," )
View(Primas_mapfre)
```

Procedo a la suma de las primas de vida y no vida para así posteriorme realizar la predicción.

#Suma de las primas 
```{r}
Primas_mapfre$Suma <- (Primas_mapfre$Primas_vida + Primas_mapfre$Primas_no_vida)
```
#Análisis exploratorio 




 METER UN GRÁFICO 
```{r}
primas_ts <- ts(Primas_mapfre$Suma, start = c(2008,1), frequency = 4)
plot(primas_ts, xlab = "Fecha", ylab= "Suma", main = "Evolución Primas de vida + Primas de no vida", col = "black")
primas_desc <- decompose(primas_ts)
plot(primas_desc, col = "black")
```
Podemos observar como la tendencia es creciente positiva, también podemos observar que existe estacionalidad.


#Manipulación de datos

```{r}
#Create a XTS object
#Convert data to XTS
xPrimas = xts(Primas_mapfre$Suma, order.by = as.Date(Primas_mapfre$Fecha,"%m/%d/%Y"),frequency=4)
```

```{r}
#Generate quarterly data
xPrimas = to.quarterly(xPrimas)
```


```{r}
#Transform to zoo data (forecast package)
zPrimas = as.zoo(xPrimas$xPrimas.Close)
names(zPrimas)="Primas"
```


```{r}
##Plot Serie
autoplot(zPrimas)+ggtitle("Primas trimestrales")+xlab("Trimestres")+ylab("Primas")

#Seasonal Plot
ggfreqplot(as.ts(zPrimas),freq=4,nrow=1,facet.labeller=c("1T","2T","3T","4T"))+ggtitle("Primas Trimestrales")

```

Eliminamos los datos de 2017 para realizar posteriormente con ETS la prediccion de 2017 y 2018
```{r Eliminamos los datos de 2017}
#Select number of observation to compare forecast
cOmit=4

#Data Size
nObs=length(zPrimas)

#sub_sample
#oVentas=zVentas[1:(nObs-cOmit),]
oPrimas <- window(zPrimas,start=index(zPrimas[1]),end=index(zPrimas[nObs-cOmit]))
View(oPrimas)
```


# Modelo ETS 
```{r}
## Select automatic ETS
etsfit<-ets(oPrimas,damped=TRUE)
#forecast model
fprimas.ets=forecast(etsfit)
#Results
summary(fprimas.ets)
```
Obtengo como resultado la predicción "Point Forecast", así como los valores en los intervalos de confianza al 80 y al 95%

```{r}
#Plot
plot(fprimas.ets)
lines(window(zPrimas),type="o")

lines(fprimas.ets$mean,col="red")
```
Nos da como resultado un modelo ETS, que se corresponde en este orden (error,tendencia y 
estacionalidad)
Error = A: Tendencia lineal
Tendencia = Ad: Tendencia lineal amortiguada
Estacionalidad = A: Tendencia lineal 

```{r}
#Actual and Forecast
matrix(c(fprimas.ets$mean[1:cOmit],zPrimas[(nObs-cOmit+1):nObs]),ncol=2)
```

```{r}
6674.6 - 6360.1
6398.6- 5930.371
4913.4-5490.845
5507.2 - 5528.540
```






Obtenemos en la primera columna la media de los valores que se han obtenido mediante el ETS, y en 
la segunda columna los valores de la predición que selecciona de manera automática los valores 
para realizar la predicción.  



#MODELO ARIMA 

Como vemos la serie temporal no es estacionaria, por lo que no es constante en varianza y media. 
Debemos realizar una transformación logarítmica primero de la varianza y observamos los resultados, después, si no apreciamos estacionariedad aun asi, procedemos a realizar el logaritmo 
de la tasa de variación. 

```{r Transformación logarítmica varianza}
#Log transformation

zPrimas_log = log(zPrimas)
df_newl <- data.frame(value = as.vector(zPrimas_log),
                     time = time(zPrimas_log))
ggplot(df_newl)+geom_point(aes(x=time,y=value))+geom_line(aes(x=time,y=value))+ylab("Primas")+ggtitle("Modelo ARIMA")+xlab("Años")
```

```{r}
#Estacionaria en varianza 
ggtsdisplay(zPrimas_log, main = "Logaritmo") 

#Los ACF y PACF son los gráficos que muestran los residuos. 
```
```{r}
#Estacionaria en media 
ggtsdisplay(diff(zPrimas_log), main = "Trasa de Variación logarítmica") 
```





# Modelo ARIMA 
```{r}
fit1=auto.arima(oPrimas,lambda=0)
summary(fit1)

#residual analysis
ggtsdisplay(fit1$residuals, main = "Residuos del modelo")

#El arima lo que me está generando es el modelo sin los residuos (en ACF y PACF) de manera 
#automática que estaba obteniendo al tranformar en logaritmo y al realizar la diferencia para 
#hacer estacionaria la serie.
```

La hipotesis nula de este test las autocorrelaciones de hasta un desfase k son iguales a 0.Es decir, que los valores de los datos son aleatorios e independientes hasta un cierto número de desfases. En nuestro caso son 12 desfases porque son 12 retardos.  

```{r}
#box-Ljung Test
Box.test(fit1$residuals,lag=6, fitdf=3, type="Lj")
Box.test(fit1$residuals,lag=8, fitdf=3, type="Lj")
Box.test(fit1$residuals,lag=12, fitdf=3, type="Lj")
Box.test(fit1$residuals,lag=24, fitdf=3, type="Lj")

fprimas.arima=forecast(fit1)

#Se acepta la hipotesis nula porque nuestro nivel de significación es superior a 0.05. Es decir, a un nivel de confianza de 95% se acepta la hipótesis nula. 
```

#Representación gráfica ARIMA



```{r}
6674.6- 6912.2
6398.6-6652.4
4913.4-5814.4
5507.2-6085.5
```


```{r}
df_new <- data.frame(value = as.vector(zPrimas),
                     time = time(zPrimas))

ggplot(df_new)+geom_point(aes(x=time,y=value))+geom_line(aes(x=time,y=value))+ geom_forecast(fprimas.arima,alpha=0.4)+xlab("Fecha")+ylab("Primas")+ggtitle("ARIMA: Predicción Primas") + theme_bw()


fprimas.arima
```











